import telebot
import json
from datetime import datetime,timedelta

SAVE_FILE = 'user_gardens.json'

#@MyGardennBot

token = ""
bot = telebot.TeleBot(token)

def load_data():
    try:
        with open(SAVE_FILE,'r',encoding='utf-8') as file:
            data = json.load(file)
            for user_id in data:
                if 'last_used' in data[user_id]:
                    data[user_id]['last_used'] = datetime.fromisoformat(data[user_id]['last_used'])
            return data
    except FileNotFoundError:
        return {}


def save_data():
    data_to_save = {}
    for user_id in user_gardens:
        data_to_save[user_id] = {
            'garden': user_gardens[user_id]['garden'],
            'last_used': user_gardens[user_id]['last_used'].isoformat()
        }
    with open(SAVE_FILE, 'w',encoding='utf-8') as file:
        json.dump(data_to_save,file,ensure_ascii=False,indent=2)


def moods():
    text = ("–°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏:\n"
            "üåû - –°–æ–ª–Ω—ã—à–∫–æ \n"
            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –†–∞–¥–æ—Å—Ç—å, –æ–ø—Ç–∏–º–∏–∑–º\n"
            "–†–∞—Å—Ç–µ–Ω–∏–µ - –ü–æ–¥—Å–æ–ª–Ω—É—Ö(üåª)\n"
            "üåßÔ∏è - –î–æ–∂–¥—å \n"
            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –ì—Ä—É—Å—Ç—å\n"
            "–†–∞—Å—Ç–µ–Ω–∏–µ - –ó–∞–≤—è–¥—à–∏–π —Ü–≤–µ—Ç–æ–∫(ü•Ä)\n"
            "‚ö° - –ú–æ–ª–Ω–∏—è \n"
            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –≠–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å\n"
            "–†–∞—Å—Ç–µ–Ω–∏–µ - –ö–∞–∫—Ç—É—Å(üåµ)\n"
            "‚ù§Ô∏è - –°–µ—Ä–¥—Ü–µ\n"
            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –õ—é–±–æ–≤—å,–Ω–µ–∂–Ω–æ—Å—Ç—å\n"
            "–†–∞—Å—Ç–µ–Ω–∏–µ - –†–æ–∑–∞(üåπ)\n"
            "üåô - –õ—É–Ω–∞\n"
            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –£–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ,–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
            "–†–∞—Å—Ç–µ–Ω–∏–µ - –õ—É–Ω–Ω—ã–π —Ü–≤–µ—Ç–æ–∫(üåº)\n"
            "üåà - –†–∞–¥—É–≥–∞\n"
            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ\n"
            "–†–∞—Å—Ç–µ–Ω–∏–µ - –¶–≤–µ—Ç–æ–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è(üå∫)\n"
            "üçÉ - –õ–∏—Å—Ç–æ–∫\n"
            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ,–≥–∞—Ä–º–æ–Ω–∏—è\n"
            "–†–∞—Å—Ç–µ–Ω–∏–µ - –ö–ª–µ–≤–µ—Ä (‚òòÔ∏è) \n"
            "üéâ - –§–µ–π–µ—Ä–≤–µ—Ä–∫ \n"
            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –ü—Ä–∞–∑–¥–Ω–∏–∫,–≤–æ—Å—Ç–æ—Ä–≥\n"
            "–†–∞—Å—Ç–µ–Ω–∏–µ - –ü—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è –ø–∞–ª—å–º–∞(üå¥)\n"
            "üí° - –õ–∞–º–ø–æ—á–∫–∞ \n"
            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –û–∑–∞—Ä–µ–Ω–∏–µ,–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ \n"
            "–†–∞—Å—Ç–µ–Ω–∏–µ - –ì—Ä–∏–±(üçÑ)\n"
            "üî• - –û–≥–æ–Ω—å\n"
            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –¢—Ä–µ–≤–æ–≥–∞,—Å—É–µ—Ç–∞\n"
            "–†–∞—Å—Ç–µ–Ω–∏–µ - –î–µ—Ä–µ–≤–æ(üå≥) \n")
    return text

user_gardens = load_data()


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —ç–º–æ–¥–∑–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –∏ —è –ø–æ—Å–∞–∂—É —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ —Ç–≤–æ–π —Å–∞–¥! üå∏\n"
                          "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞: üåû, üåßÔ∏è, ‚ö°, ‚ù§Ô∏è, üåô, üåà, üçÉ, üéâ, üí°, üî•")

@bot.message_handler(commands=['help'])
def show_commands(message):
    bot.send_message(message.chat.id, "–í–æ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞: \n"
                                      "/garden - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π —Å–∞–¥\n"
                                      "/mood - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏\n"
                                      "/cooldown - –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –ø–æ—Å–∞–¥–∫–∏")


@bot.message_handler(commands=['garden'])
def show_garden(message):
    user_id = str(message.from_user.id)
    garden = user_gardens.get(user_id, {}).get('garden', '–¢–≤–æ–π —Å–∞–¥ –µ—â—ë –ø—É—Å—Ç... üå±')
    bot.send_message(message.chat.id, f"–¢–≤–æ–π —Å–∞–¥:\n"
                                      f"{garden}")

@bot.message_handler(commands=['cooldown'])
def cooldown_time(message):
    user_id = str(message.from_user.id)
    now = datetime.now()
    user_data = user_gardens.get(user_id, {})
    last_used = user_data.get('last_used', datetime.min)
    if now - last_used < timedelta(minutes=1):
        next_time = last_used + timedelta(minutes=1)
        wait_minutes = int((next_time - now).total_seconds() // 60)
        bot.send_message(message.chat.id, f"‚è≥ –ß—Ç–æ–±—ã –ø–æ—Å–∞–¥–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_minutes} –º–∏–Ω—É—Ç!")
    else:
        bot.send_message(message.chat.id,"–ú–æ–∂–Ω–æ –ø–æ—Å–∞–¥–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ!")

@bot.message_handler(commands=['mood'])
def show_mood(message):
    text = moods()
    bot.send_message(message.chat.id,text)



@bot.message_handler(content_types=['text'])
def handle_mood(message):
    user_id = str(message.from_user.id)
    mood = message.text.strip()

    plants = {"üåû": "üåª","üåßÔ∏è": "ü•Ä","‚ö°": "üåµ","‚ù§Ô∏è": "üåπ",
              "üåô": "üåº","üåà": "üå∫","üçÉ": "‚òòÔ∏è","üéâ": "üå¥",
              "üí°": "üçÑ","üî•": "üå≥"
    }
    plant = plants.get(mood, None)

    if not plant:
        bot.send_message(message.chat.id,"–≠–º–æ–¥–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–æ")
        return

    now = datetime.now()
    user_data = user_gardens.get(user_id, {})
    last_used = user_data.get('last_used', datetime.min)

    if now - last_used < timedelta(hours=1):
        next_time = last_used + timedelta(hours=1)
        wait_minutes = int((next_time - now).total_seconds() // 60)
        bot.send_message(message.chat.id, f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ—Å–∞–¥–∏—Ç—å —á–µ—Ä–µ–∑ {wait_minutes} –º–∏–Ω—É—Ç!")
        return

    if user_id not in user_gardens:
        user_gardens[user_id] = {'garden': plant, 'last_used': now}
    else:
        garden = user_gardens[user_id]['garden']
        garden += plant
        user_gardens[user_id]['garden'] = garden
        user_gardens[user_id]['last_used'] = now

    save_data()
    bot.send_message(message.chat.id, f"+ {plant}\n"
                                      f"–°–∞–¥ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                                      f"{user_gardens[user_id]['garden']}")



bot.polling()